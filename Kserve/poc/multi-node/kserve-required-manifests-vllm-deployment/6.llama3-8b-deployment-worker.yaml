apiVersion: apps/v1
kind: Deployment
metadata:
  name: vllm-mn-test-worker
  namespace: vllm-llama3-8b-poc
  annotations:
    internal.serving.kserve.io/storage-initializer-sourceuri: pvc://llama-3-8b-pvc
    prometheus.kserve.io/path: /metrics
    prometheus.kserve.io/port: "3000"
    serving.kserve.io/deploymentMode: RawDeployment
  labels:
    app: isvc.vllm-mn-test-predictor
    component: predictor
    serving.kserve.io/inferenceservice: vllm-mn-test
    node-type: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: isvc.vllm-mn-test-predictor
      node-type: worker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        app: isvc.vllm-mn-test-predictor
        component: predictor
        serving.kserve.io/inferenceservice: vllm-mn-test
        node-type: worker
      annotations:
        internal.serving.kserve.io/storage-initializer-sourceuri: pvc://llama-3-8b-pvc
        prometheus.kserve.io/path: /metrics
        prometheus.kserve.io/port: "3000"
        serving.kserve.io/deploymentMode: RawDeployment
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: nvidia.com/gpu.product
                    operator: In
                    values:
                      - NVIDIA-A10G
      initContainers:
        - name: check-gcs-health
          image: vllm/vllm-openai:latest
          command:
            [
              "bash",
              "-c",
              'SECONDS=0; while true; do if (( SECONDS <= 120 )); then if ray health-check --address ${ISVC_NAME}-head.${POD_NAMESPACE}.svc.cluster.local:6379 > /dev/null 2>&1; then echo "GCS is ready."; break; fi; echo "$SECONDS seconds elapsed: Waiting for GCS to be ready."; else if ray health-check --address ${ISVC_NAME}-head.${POD_NAMESPACE}.svc.cluster.local:6379; then echo "GCS is ready. Any error messages above can be safely ignored."; break; fi; echo "$SECONDS seconds elapsed: Still waiting for GCS to be ready. For troubleshooting, refer to the FAQ at https://github.com/ray-project/kuberay/blob/master/docs/guidance/FAQ.md."; fi; sleep 5; done',
            ]
          env:
            - name: ISVC_NAME
              value: vllm-mn-test
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
        - name: server
          image: vllm/vllm-openai:latest
          imagePullPolicy: Always
          command: ["bash", "-c"]
          args:
            - |
              echo "Attempting to connect to Ray cluster at $RAY_HEAD_ADDRESS ..."
              RAY_HEAD_ADDRESS="${ISVC_NAME}-head.${POD_NAMESPACE}.svc.cluster.local:6379"
              ray start --address="$RAY_HEAD_ADDRESS" --block
          env:
            - name: HOME
              value: "/tmp"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ISVC_NAME
              value: vllm-mn-test
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - bash
                - -c
                - |
                  [[ $(ray status | grep -c node_) -eq ${PIPELINE_PARALLEL_SIZE} ]]
          startupProbe:
            failureThreshold: 12
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - ray
                - status
          resources:
            limits:
              cpu: "16"
              memory: 48Gi
              nvidia.com/gpu: "1"
            requests:
              cpu: "8"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: shm
              mountPath: /dev/shm
            - name: llama-3-pvc
              mountPath: /llama_3_storage
              readOnly: true
      priorityClassName: system-node-critical
      securityContext: {}
      terminationGracePeriodSeconds: 2
      volumes:
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: 12Gi
        - name: llama-3-pvc
          persistentVolumeClaim:
            claimName: llama-3-8b-pvc-2
